#include <stdio.h>
#include <stdlib.h>


  int compare(const void* a, const void* b) {
      int int_a = *(int*)a;
      int int_b = *(int*)b;

      if (int_a < int_b) {
          return -1;  
      } else if (int_a > int_b) {
          return 1;   
      } else {
          return 0;   
      }
  }

int maxProfitAssignment(int* difficulty, int* profit, int* worker, int n, int m) {
    
    int maxProfit = 0;
    for (int i = 0; i < n; i++) {
        for (int j = i + 1; j < n; j++) {
            if (difficulty[i] > difficulty[j]) {
                
                int temp = difficulty[i];
                difficulty[i] = difficulty[j];
                difficulty[j] = temp;
              
                temp = profit[i];
                profit[i] = profit[j];
                profit[j] = temp;
            }
        }
    }
    qsort(worker, m, sizeof(int), compare);

    int totalProfit = 0;
    int j = 0;

    for (int i = 0; i < m; i++) {
        while (j < n && difficulty[j] <= worker[i]) {
            if (profit[j] > maxProfit) {
                maxProfit = profit[j];
            }
            j++;
        }
        totalProfit += maxProfit;
    }

    return totalProfit;
}
int main() {
    int difficulty[] = {2, 4, 6, 8, 10};
    int profit[] = {10, 20, 30, 40, 50};
    int worker[] = {4, 5, 6, 7};
    int n = sizeof(difficulty) / sizeof(difficulty[0]);
    int m = sizeof(worker) / sizeof(worker[0]);

    int maxProfit = maxProfitAssignment(difficulty, profit, worker, n, m);
    printf("Lucro: %d\n", maxProfit);

    return 0;
}
